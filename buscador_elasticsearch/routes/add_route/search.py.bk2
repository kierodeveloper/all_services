#   Clase Usuarios Rutas
#   Creada por: ...
#   Fecha creacion: ...

#Archivos necesarios para flask

#Se llama el objeto de flask
from elasticsearch import Elasticsearch
from flask import jsonify, request
from routes.router import app,resource,response,req,reqpar
#from database.schemas.catalogo import Catalogo

from app.services.sproducts_relationates import sProducts_relationates

import json
import os
from json import dumps

#Importando el conector odbc para las conexiones con mssql
import pyodbc
# conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=204.141.52.148;DATABASE=DBKiero_Productos;UID=MachineBaseConnect3651;PWD=H1#KotS(xh5nF+tGv')

#importamos hunspell para agregar palabras de diminutivos y este tambien nos sirve para palabras que elastic search


#clase para el control de rutas en usuarios 
# from app.services.connect_to_mysql import mysql
class rSearch(resource):
    
    def _connect_elasticsearch(self):
        _es = None
        _es = Elasticsearch([{'host': 'localhost', 'port': 9200}])
        if _es.ping():
            return(_es)
        else:
            return('Awww it could not connect!')
        return _es

    def _search_products_with_category(self,category_id, query):
        #print('category')
        _es = self._connect_elasticsearch()
        res= _es.search(index='publies_products',body={
        'query':{
            'bool':{
                'must':{
                    'match':{
                        'Titulo':query
                    }
                    },
                    "filter":{
                        "range":{
                            "Category_id":{
                                "gt":category_id
                            }
                        }
                    }
                }
            }
        })

        return( res['hits']['hits'])

    def _replaceMultiple(self,mainString, toBeReplaces, newString):
        # Iterate over the strings to be replaced
        for elem in toBeReplaces :
            # Check if string is in the main string
            if elem in mainString :
                # Replace the string
                mainString = mainString.replace(elem, newString)
        
        return  mainString

    ###########################################
  
    
    ###########################################

    def _suggestWords(self,query):
        ite = True;
        word = []
        correction = ''
        resultado= True;
        #tildes = dic.suggest(query)
        #print(dic.suggest(query))
        #query = tildes[0]
        #listWords = query.split()
        # for i in listWords:
        #     print(i)
        #     word.append(dic.spell(i))
        # print(word)
        # for i in word:
        #     if i is False:
        #         resultado = False
        # if resultado is True:
        #     correction  = query
        # else:
        while ite:
            es = self._connect_elasticsearch()
            res= es.search(index='publies_products',body={
                    "suggest": {
                        "text" : query,
                        "my-suggest-1" : {
                            "term" : {
                                "field" : "Titulo"
                            }
                        }
                    }
                })

            for i in res['suggest']['my-suggest-1']:
                if i['options']:
                    
                    correction += i['options'][0]['text'] + ' '
                else:
                    correction += i['text'] + ' '

            ite = False 
                 
                #print(res['suggest']['my-suggest-1'][0]['options'][0]['text'])

            # if correction:
            #     query = (res['suggest']['simple_phrase'][0]['options'][0]['text'])
            # else:
            #     correction = query
        return (correction)



    #############################################

        
    #############################################


    def _search_products(self,query):
        correction = self._suggestWords(query)
        _es = self._connect_elasticsearch()
        res= _es.search(index='publies_products',body={
            "query": {
                "multi_match": {
                "query": correction,
                "type": "best_fields",  
                "fields": [
                    "Titulo",
                    "opening_text",
                    "redirect.Titulo.near_match"
                ]
                }
            }
        },size=100)

       

        # res= _es.search(index='search_products',body={
        #     "query": {
        #         "multi_match": {
        #         "query": query,
        #         "type": "best_fields",  
        #         "fields": [
        #             "Titulo",
        #             "opening_text",
        #             "redirect.Titulo.near_match"
        #         ]
        #         }
        #     }
        # },size=100)

        # res= _es.rank_eval(index='search_products',body={
        # "requests": [{
        #     "id": "caminadores",
        #     "request": {
        #     "query": {
        #         "multi_match": {
        #         "query": "caminadores",
        #         "type": "best_fields",
        #         "fields": [
        #             "Titulo",
        #             "opening_text",
        #             "redirect.Titulo.near_match"
        #         ]
        #         }
        #     }
        #     },
        #     "summary_fields": [
        #     "Titulo","Precio_cop","Producto_Id","Categoria_id","Imagenes_1"
        #     ],
        #     "ratings": [{
        #         "_id": "1",
        #         "rating": 1,
        #         "_index": "enwiki_rank"
        #     },
        #     {
        #         "_id": "2",
        #         "rating": 3,
        #         "_index": "enwiki_rank"
        #     }
        #     ]
        # }],
        # "metric": {
        #     "precision": {
        #     "relevant_rating_threshold": 2
        #     }
        # }
        # })
#HERE
        return_json = []
        for row in res['hits']['hits']:
            build_json = {
                'query': correction,
                'Producto_Id' : row['_source']['Producto_Id'],
                'Categoria_id' : row['_source']['Categoria_id'],
                'Titulo' : row['_source']['Titulo'],
                'permalink' : 'https://articulo.kiero.co/product-details/?id-'+ row['_source']['Producto_Id']+'-'+(self._replaceMultiple(row['_source']['Titulo'],["[","!","@","#",'"',"$",";","]","'",'(',')','/','?',',','.'],'')).replace(' ','-'),
                'Precio_cop' : row['_source']['Precio_cop'],
                'Imagenes_1' : row['_source']['Imagenes_1'],
            }
            return_json.append(build_json)
        return return_json
#HERE
    
    # def search_one_words(self,string):
    #     with conn:
    #         query = """SELECT top(100) Producto_id, Categoria_id, Titulo,Precio_cop, Imagenes_1 FROM tbl_Productos where Titulo like '%{string}%' """.format(string=string)
    #         crsr = conn.execute(query)
    #         rows = crsr.fetchall()
    #     result = []

        

        
        # fin = open('storage/DATA/tanda1.txt')
        # words = [string]
        # found = {}
        # number_of_lines = 0
        # for line in fin:
        #     str1=line.split('|')[1]
            
        #     for w in words:
        #         if w in str1:
                    
        #             if number_of_lines <= 50:
                        
        #                 json_to_send ={
        #                     "_index": "search_products",
        #                     "_source": {
        #                             "Link": line.split('|')[2],
        #                             "Product_id": line.split('|')[0],
        #                             "price": line.split('|')[4],
        #                             "Titulo": line.split('|')[1],
        #                             "Category_id": line.split('|')[5],
        #                             "image": line.split('|')[3]
        #                     },
        #                     "_id": line.split('|')[0],
        #                     "_type": "products"
        #                     }
        #                 result.append(json_to_send)
        #                 number_of_lines = number_of_lines +1
        #         break
        # return result

    def post(self):
        try:
            data = request.get_json(force=True)
            search_query=data['query']
                # category_id=data['category_id']
        except Exception as err:
            return {'status':'success','result':{'code':0,'message':'envie los parametros correspondientes'}}
            
        try:
                        
            if search_query:
                # retorno = self._search_products_with_category(category_id,search_query)
                retorno = self._search_products(search_query)
            
            elif len(search_query) > 0:
                retorno = self._search_products(search_query)
                
            
            __return = response(json.dumps({"status":1,'result':retorno }),status=200, mimetype='application/json') 
            __return.headers['Access-Control-Allow-Origin'] = '*'
            __return.headers['Access-Control-Allow-Methods'] = 'POST'
            __return.headers['Allow'] = 'POST'
            return __return
        except Exception as err:
            #print(err)
            objectoJson={}
            objectoJson['Mensaje'] =  'Hubo un error'
            objectoJson['Resultados'] = None
            _json = json.dumps(objectoJson)
            _response = response(_json,status=500, mimetype='application/json')
        
        _response.headers['Access-Control-Allow-Origin'] = '*'
        return _response

    def options(self):
        return {'Metodos permitidos' : ['GET'] }, 200, \
        { 'Access-Control-Allow-Origin': '*', \
        'Access-Control-Allow-Methods' : 'GET', \
        'Access-Control-Allow-Headers': 'X-Custom-Header'   }
